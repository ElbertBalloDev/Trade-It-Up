service:
  name: trade-it-up-api

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-iam-roles-per-function:
    defaultInherit: true # Each function will inherit the service level roles too.
  globalTables:
    regions: # list of regions in which you want to set up global tables
      - us-east-1 # Ohio (default region to date for stack)
    createStack: true

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  frameworkVersion: ‘1.64.1’
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    DEBUG: "*"
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    productsTable: products
    messageTable: messages
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # hello:
  #   handler: src/libs/handler.hello
  #   events:
  #     - http:
  #         method: get
  #         path: hello
  getMessage:
    handler: src/message/get.main
    events:
      - http:
          method: get
          path: message
  create:
    handler: src/products/create.main
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer: aws_iam
  delete:
    handler: src/products/delete.main
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          # authorizer: aws_iam
  get:
    handler: src/products/get.main
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: src/products/list.main
    events:
      - http:
          path: products
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: src/products/update.main
    events:
      - http:
          path: products/{id}
          method: put
          cors: true
          authorizer: aws_iam
  addMessage:
    handler: src/message/create.main
    events:
      - http:
          path: messages
          method: post
          cors: true
          authorizer: aws_iam

resources:
  - ${file(src/resources/api-gateway-errors.yml)}
